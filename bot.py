import os
import requests
import schedule
import time
import hashlib
import sqlite3
import csv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import openai
from dotenv import load_dotenv
import re

##############################################
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
##############################################
load_dotenv()

SCOPUS_API_KEY = os.getenv("SCOPUS_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_THREAD_ID = os.getenv("TELEGRAM_THREAD_ID")

if not SCOPUS_API_KEY or not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHANNEL_ID or not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ .env! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SCOPUS_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID, OPENAI_API_KEY.")

openai.api_key = OPENAI_API_KEY

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("s_articles.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS published_articles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hash TEXT UNIQUE,
    doi TEXT,
    eng_title TEXT,
    rus_title TEXT,
    first_author TEXT,
    pub_date TEXT
)
""")
conn.commit()

##############################################
# 2. –£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä <inf>)
##############################################
def remove_html_tags(text: str) -> str:
    return re.sub(r"<[^>]*>", "", text or "")

##############################################
# 3. –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ Scopus
##############################################
def search_scopus():
    """
    –ò—â–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ Scopus –ø–æ –¥–≤—É–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:
    hydrogen –∏ ammonia. –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π.
    """
    print("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ Scopus...")

    keywords = ["hydrogen", "ammonia"]
    query_parts = [f"TITLE({kw})" for kw in keywords]
    query_str = " OR ".join(query_parts)

    url = f"https://api.elsevier.com/content/search/scopus?query={query_str}&sort=-coverDate&count=10"
    headers = {
        "X-ELS-APIKey": SCOPUS_API_KEY,
        "Accept": "application/json"
    }

    resp = requests.get(url, headers=headers)
    if resp.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ Scopus API:", resp.status_code, resp.text)
        return

    data = resp.json()
    entries = data.get("search-results", {}).get("entry", [])
    if not entries:
        print("–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    for entry in entries:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        doi = entry.get("prism:doi", "No DOI")
        eng_title = entry.get("dc:title", "No Title")
        pub_date = entry.get("prism:coverDate", "No Date")
        first_author = extract_first_author(entry)

        # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        eng_title_clean = remove_html_tags(eng_title)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
        unique_str = f"{doi}-{eng_title_clean}-{pub_date}-{first_author}"
        rec_hash = hashlib.md5(unique_str.encode("utf-8")).hexdigest()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        cursor.execute("SELECT * FROM published_articles WHERE hash=?", (rec_hash,))
        if cursor.fetchone():
            # –£–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏
            continue

        print(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: {eng_title_clean} (DOI: {doi})")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ OpenAI
        rus_title = translate_title_openai(eng_title_clean)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        cursor.execute("""
            INSERT INTO published_articles (hash, doi, eng_title, rus_title, first_author, pub_date)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (rec_hash, doi, eng_title_clean, rus_title, first_author, pub_date))
        conn.commit()

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram
        send_to_telegram(rus_title, first_author, pub_date, doi)

def extract_first_author(entry):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–æ–ª—è "dc:creator".
    –ú–æ–∂–µ—Ç –±—ã—Ç—å 'Smith, John; Williams, Kate'.
    """
    creators = entry.get("dc:creator", "No Author")
    return creators.split(";")[0].strip()

##############################################
# 4. –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenAI
##############################################
def translate_title_openai(eng_title: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ GPT-4 (–∏–ª–∏ gpt-3.5-turbo).
    """
    if not eng_title or eng_title == "No Title":
        return "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"

    try:
        # –í–ù–ò–ú–ê–ù–ò–ï: –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç gpt-4, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "gpt-3.5-turbo"
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ —Å–º—ã—Å–ª."
                },
                {
                    "role": "user",
                    "content": eng_title
                }
            ],
            temperature=0
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:", e)
        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return eng_title

##############################################
# 5. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
##############################################
def send_to_telegram(rus_title, first_author, pub_date, doi):
    """
    –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
    - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º),
    - –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ä,
    - –¥–∞—Ç–∞,
    - DOI (–≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏),
    - –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ (–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª).
    """
    if doi == "No DOI":
        doi_link_markdown = "–ë–µ–∑ DOI"
        doi_url = None
    else:
        doi_link_markdown = f"[{doi}](https://doi.org/{doi})"
        doi_url = f"https://doi.org/{doi}"

    message_text = (
        f"*{rus_title}*\n"
        f"–ê–≤—Ç–æ—Ä: {first_author}\n"
        f"–î–∞—Ç–∞: {pub_date}\n"
        f"DOI: {doi_link_markdown}"
    )

    markup = InlineKeyboardMarkup()
    if doi_url:
        markup.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", url=doi_url))

    try:
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL_ID,
            text=message_text,
            parse_mode="Markdown",
            reply_markup=markup,
            message_thread_id=TELEGRAM_THREAD_ID
        )
        print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {rus_title}")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e)

##############################################
# 6. –í—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –≤ CSV –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
##############################################
def export_db_to_csv():
    """
    –í—ã–≥—Ä—É–∂–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É published_articles –≤ CSV-—Ñ–∞–π–ª.
    –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª (–µ—Å–ª–∏ DOI –µ—Å—Ç—å).
    """
    filename = "scopus_pub.csv"
    with open(filename, "w", newline="", encoding="utf-8-sig") as f:
        writer = csv.writer(f)
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        writer.writerow([
            "ID", "Hash", "DOI", "English Title", "Russian Title",
            "First Author", "Publication Date", "Original Link"
        ])

        cursor.execute("SELECT id, hash, doi, eng_title, rus_title, first_author, pub_date FROM published_articles")
        rows = cursor.fetchall()
        for row in rows:
            id_, hash_, doi, eng_title, rus_title, first_author, pub_date = row
            if doi != "No DOI":
                original_link = f"https://doi.org/{doi}"
            else:
                original_link = "No link"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ —Å—Ç—Ä–æ–∫—É CSV, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É
            writer.writerow([
                id_, hash_, doi, eng_title, rus_title,
                first_author, pub_date, original_link
            ])
    return filename

def send_csv_to_telegram():
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ë–î –≤ CSV –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram-–≥—Ä—É–ø–ø—É.
    """
    filename = export_db_to_csv()
    try:
        with open(filename, "rb") as f:
            bot.send_document(TELEGRAM_CHANNEL_ID, f, caption="–°–≤–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–π Scopus (CSV)", message_thread_id=TELEGRAM_THREAD_ID)
        print("‚úÖ CSV-—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV-—Ñ–∞–π–ª–∞:", e)

##############################################
# 7. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
##############################################
# –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∞)
schedule.every(1).minutes.do(search_scopus)

# –í—ã–≥—Ä—É–∑–∫–∞ –ë–î (CSV) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 13:42
schedule.every().saturday.at("14:38").do(send_csv_to_telegram)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    search_scopus()

    while True:
        schedule.run_pending()
        time.sleep(10)
